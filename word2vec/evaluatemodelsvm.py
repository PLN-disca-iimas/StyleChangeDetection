# -*- coding: utf-8 -*-
"""evaluatemodelsvm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bvq_meVWB4X0BooycsGMxFzFfgPTZaqC
"""

import gensim
import os
import re
import numpy as np
import json as js
import argparse
import pandas as pd
import sklearn
import joblib
from sklearn.svm import SVC
from gensim.models import KeyedVectors
from gensim import models

DEBUG=False

def load_modelSVM(model_path):
  svm_model = joblib.load(model_path)
  return svm_model

def load_modelW2V(model_path):
  modelW2V = gensim.models.KeyedVectors.load_word2vec_format(model_path, binary=True)

  return modelW2V

def prepare_test_data(datavalidationdirectory):
  data_parsed = []

  for element in [x for x in os.listdir(datavalidationdirectory) if '.txt' in x]:
    id = re.findall(r'^[a-zA-Z\-0-9]*\-([0-9]+).txt$',element)[0]
    with open(os.path.join(datavalidationdirectory,f'problem-{id}.txt'),'r', encoding="utf-8") as f:
      data = f.readlines()

  
    comb = []
    for i in range(0,len(data)-1):
      comb.append({"id":f'{id}-{i+1}-{i+2}',"pair": [data[i],data[i+1]]})
    data_parsed.append(comb)

  with open(os.path.join(datavalidationdirectory,'validation.json'),'w',encoding="utf-8") as f:
    js.dump(data_parsed, f, indent=4)

  print("validation data prepared")


def evaluate_model(datavalidation_path,prediction_path,modelSVM,modelw2v):

  with open(os.path.join(datavalidation_path,'validation.json')) as f:
    data = js.load(f)
  print("----------- PREDICTION ------------")
  for dict in data:
    conf = []
    for dict_line in dict:
      X_0 = modelw2v.get_mean_vector(dict_line["pair"][0].lower().split(),pre_normalize=False, post_normalize=True)
      X_1 = modelw2v.get_mean_vector(dict_line["pair"][1].lower().split(),pre_normalize=False, post_normalize=True)
      X = np.absolute(X_0) - np.absolute(X_1)
      X = np.absolute(X)
      X = X.reshape(1, -1)
      temp = modelSVM.predict(X)
      print(temp)
      conf.append(int(temp))

      problem_number = int(re.findall(r'([0-9]+)-[0-9]+-[0-9]+',dict_line["id"])[0])
      print(os.path.join(prediction_path,f"solution-problem-{problem_number}.json"))
      with open(os.path.join(prediction_path,f"solution-problem-{problem_number}.json"),"w+") as f:
        js.dump({"changes":conf},f)

def main():
  parser = argparse.ArgumentParser(description='')
  parser.add_argument('-m', type=str, help='Directorio del modelo de Word2Vec formato .bin')
  parser.add_argument('-d', type=str, help='Directorio del dataset preparado')
  parser.add_argument('-p', type=str, help='Directorio de las predicciones')
  parser.add_argument('-s', type=str, help='Directorio del modelo SVM')
  args = parser.parse_args()

  if not args.m:
    print('ERROR: Requiero directorio del modelo word2vec')
    parser.exit(1)
  if not args.d:
    print('ERROR: Requiero directorio del dataset preparado')
    parser.exit(1)
  if not args.p:
    print('ERROR: Requiero directorio de salida de las predicciones')
    parser.exit(1)
  if not args.s:
    print('ERROR: Requiero directorio del modelo SVM')
    parser.exit(1)

  #carga el modelo SVM
  modeloSVM=load_modelSVM(args.s)
  #carga el modelo Word2Vec
  modeloW2V=load_modelW2V(args.m)
  #prepara la data de verificación
  prepare_test_data(args.d)
  #evalúa el modelo
  evaluate_model(args.d,args.p,modeloSVM,modeloW2V)

  

if __name__ == '__main__':
  main()